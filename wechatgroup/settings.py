"""
Django settings for wechatgroup project.

Generated by 'django-admin startproject' using Django 2.0.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import json

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

cfg = None
try:
    f = open(os.path.join(os.path.dirname(BASE_DIR), 'wechatgroup.config.json'), 'r')
    cfg = json.load(f)
    f.close()
except Exception as e:
    pass

APP_DOMAIN = cfg["APP_DOMAIN"]
API_DOMAIN = cfg["API_DOMAIN"]
API_PORT = str(cfg['API_PORT'])

if cfg['ENV'] == 'production':
    APP_DOMAIN_ALIAS = 'www.' + APP_DOMAIN
    

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '&th5t6+qqez!x*%9_qqts8cx!ed%a4#z$7zv6_ld4&mlyeq8fz'

# SECURITY WARNING: don't run with debug turned on in production!
if cfg['ENV'] == 'production':
    DEBUG = False
else:
    DEBUG = True

ADMIN_ENABLED = True

if cfg['ENV'] == 'production':
    ALLOWED_HOSTS = ['127.0.0.1', APP_DOMAIN]
    if APP_DOMAIN_ALIAS:
        ALLOWED_HOSTS.append(APP_DOMAIN_ALIAS)
else:
    ALLOWED_HOSTS = ['127.0.0.1', APP_DOMAIN]

AUTH_USER_MODEL = 'account.User'

# Application definition

INSTALLED_APPS = [
    'account.apps.AccountConfig',
    'commerce.apps.CommerceConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders'
    #'rest_framework'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware', # Must before CommonMiddleware
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'wechatgroup.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'wechatgroup.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': cfg["DATABASE"]["NAME"],
        'USER': cfg["DATABASE"]["USERNAME"],
        'PASSWORD': cfg["DATABASE"]["PASSWORD"],
        'HOST': 'localhost',   # Or an IP Address that your DB is hosted on
        'PORT': '3306',
        'OPTIONS': {
            'init_command': 'SET innodb_strict_mode=1',
        },
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'debug-log.log'),
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'
MEDIA_URL = '/media/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static/')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

# CORS_ORIGIN_ALLOW_ALL = True
if cfg['ENV'] == 'production':
    CORS_ORIGIN_WHITELIST = (
        '127.0.0.1',
        APP_DOMAIN,
        APP_DOMAIN_ALIAS
    )
else:
    CORS_ORIGIN_WHITELIST = (
        '127.0.0.1',
        'localhost:4200',
        APP_DOMAIN
    )

# ENV -- 'production' or 'local'
if cfg['ENV'] == 'production':
    CSRF_COOKIE_DOMAIN = APP_DOMAIN
    CSRF_TRUSTED_ORIGINS = {APP_DOMAIN, APP_DOMAIN_ALIAS}
else:
    CSRF_COOKIE_DOMAIN = APP_DOMAIN
    CSRF_TRUSTED_ORIGINS = {APP_DOMAIN, 'localhost:4200'}


# Store CSRF token in the user's session or cookie
CSRF_USE_SESSIONS = False

CSRF_COOKIE_SECURE = False


PROJECT_ROOT = os.path.abspath(os.path.dirname(__file__))


SEND_EMAIL_SUBJECT = 'Contact Us'
EMAIL_ADDRESS = 'support@yocompute.com'
EMAIL_BACKEND = "sgbackend.SendGridBackend"
SENDGRID_API_KEY = cfg['SENDGRID']['API_KEY']

STRIPE_API_KEY = cfg['STRIPE']['API_KEY']

